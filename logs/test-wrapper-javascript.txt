
// ============== DEBUG INFO ==============
// Test case name: Basic Functionality Test
// Input: [1, 2, 3, 4, 5]
// Expected Output: 15
// ======================================

// Original code
function arraySum(numbers) {
  let sum = 0;
  for (let i = 0; i < numbers.length; i++) {
    sum += numbers[i];
  }
  return sum;
}

// Execute the test
try {
  console.log("\n[Debug] Starting test execution for 'Basic Functionality Test'");
  
  // Parse the input and expected output
  let parsedInput;
  try {
    parsedInput = [1, 2, 3, 4, 5];
    console.log("[Debug] Parsed input:", JSON.stringify(parsedInput));
  } catch (e) {
    console.error("[Debug] Error parsing input:", e.message);
    parsedInput = [1, 2, 3, 4, 5];
  }
  
  let parsedExpectedOutput;
  try {
    parsedExpectedOutput = 15;
    console.log("[Debug] Parsed expected output:", JSON.stringify(parsedExpectedOutput));
  } catch (e) {
    console.error("[Debug] Error parsing expected output:", e.message);
    parsedExpectedOutput = 15;
  }

  // Log available functions
  console.log("[Debug] Looking for function in the code...");
  
  // First, examine the submitted code for function definitions
  const functionNames = [];
  
  // For "function name()" style
  let match;
  const fnRegex = /function\s+(\w+)\s*\(/g;
  while ((match = fnRegex.exec("function arraySum(numbers) {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  return sum;\n}")) !== null) {
    functionNames.push(match[1]);
  }
  
  // For "const name = function()" or "const name = ()" style
  const varFnRegex = /(?:var|let|const)\s+(\w+)\s*=\s*(?:function|\()/g;
  while ((match = varFnRegex.exec("function arraySum(numbers) {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  return sum;\n}")) !== null) {
    functionNames.push(match[1]);
  }
  
  console.log("[Debug] Detected functions:", functionNames.join(", ") || "none");
  
  // Try common function names if none found
  const possibleNames = ["arraySum", "sum", "calculateSum", ...functionNames, "solution"];
  let functionName = null;
  
  for (const name of possibleNames) {
    try {
      console.log("[Debug] Checking if '" + name + "' is a function");
      // Check if the function exists in global scope
      const fn = eval(name);
      if (typeof fn === "function") {
        functionName = name;
        console.log("[Debug] Found function: " + name);
        break;
      }
    } catch (e) {
      console.log("[Debug] Function '" + name + "' not found or error: " + e.message);
    }
  }
  
  if (!functionName) {
    console.error("[Debug] No function found. Using first detected function or 'solution'");
    functionName = functionNames[0] || "solution";
  }
  
  // Call the function with the input
  console.log("[Debug] Executing function '" + functionName + "' with input");
  let actualOutput;
  
  // Try different ways to call the function
  try {
    eval("actualOutput = " + functionName + "(parsedInput)");
    console.log("[Debug] Function executed successfully");
  } catch (error) {
    console.error("[Debug] Error calling function directly:", error.message);
    
    // Try calling it using the global object
    try {
      actualOutput = global[functionName](parsedInput);
      console.log("[Debug] Function executed successfully via global object");
    } catch (error2) {
      console.error("[Debug] Error calling function via global:", error2.message);
      
      // Last resort: try evaling the entire code again with direct function call
      try {
        const fullExecution = "function arraySum(numbers) {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  return sum;\n}" + "\n" + functionName + "(parsedInput)";
        actualOutput = eval(fullExecution);
        console.log("[Debug] Function executed successfully via full code eval");
      } catch (error3) {
        console.error("[Debug] All function call attempts failed:", error3.message);
        throw new Error("Could not execute function: " + error3.message);
      }
    }
  }
  
  console.log("[Debug] Actual output:", JSON.stringify(actualOutput));
  
  // Check if the output matches the expected output
  const actualOutputStr = JSON.stringify(actualOutput);
  const expectedOutputStr = JSON.stringify(parsedExpectedOutput);
  const isPassed = actualOutputStr === expectedOutputStr;
  
  // Print the results
  console.log("Test: " + (isPassed ? "PASSED" : "FAILED"));
  console.log("Expected: " + expectedOutputStr);
  console.log("Actual: " + actualOutputStr);
} catch (error) {
  console.error("[Debug] Test error:", error);
  console.error("Test error: " + error.message);
}